// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getOrCreateUser = `-- name: GetOrCreateUser :one
WITH i AS(
    INSERT INTO users (email, first_name, last_name) 
    VALUES ($1, $2, $3)
    ON CONFLICT(email) DO NOTHING
    RETURNING id, email, first_name, last_name, created_at, updated_at
)
SELECT id, email, first_name, last_name, created_at, updated_at FROM i
UNION
SELECT id, email, first_name, last_name, created_at, updated_at FROM users WHERE email = $1
`

type GetOrCreateUserParams struct {
	Email     string
	FirstName string
	LastName  string
}

type GetOrCreateUserRow struct {
	ID        uuid.UUID
	Email     string
	FirstName string
	LastName  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetOrCreateUser(ctx context.Context, arg GetOrCreateUserParams) (GetOrCreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, getOrCreateUser, arg.Email, arg.FirstName, arg.LastName)
	var i GetOrCreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, first_name, last_name, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, first_name, last_name, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserLedgers = `-- name: GetUserLedgers :many
SELECT id, title, members, created_at, updated_at FROM ledgers
WHERE $1 = ANY (ledgers.members)
`

func (q *Queries) GetUserLedgers(ctx context.Context, dollar_1 interface{}) ([]Ledger, error) {
	rows, err := q.db.QueryContext(ctx, getUserLedgers, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ledger
	for rows.Next() {
		var i Ledger
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			pq.Array(&i.Members),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
