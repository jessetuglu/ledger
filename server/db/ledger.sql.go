// Code generated by sqlc. DO NOT EDIT.
// source: ledger.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addTransactionToLedger = `-- name: AddTransactionToLedger :exec
UPDATE ledgers SET transactions = array_append(transactions, $2)
WHERE id = $1
RETURNING id, title, members, transactions, created_at, updated_at
`

type AddTransactionToLedgerParams struct {
	ID          uuid.UUID
	ArrayAppend interface{}
}

func (q *Queries) AddTransactionToLedger(ctx context.Context, arg AddTransactionToLedgerParams) error {
	_, err := q.db.ExecContext(ctx, addTransactionToLedger, arg.ID, arg.ArrayAppend)
	return err
}

const addUserToLedger = `-- name: AddUserToLedger :exec
UPDATE ledgers SET members = array_append(members, $2)
WHERE id = $1
RETURNING id, title, members, transactions, created_at, updated_at
`

type AddUserToLedgerParams struct {
	ID          uuid.UUID
	ArrayAppend interface{}
}

func (q *Queries) AddUserToLedger(ctx context.Context, arg AddUserToLedgerParams) error {
	_, err := q.db.ExecContext(ctx, addUserToLedger, arg.ID, arg.ArrayAppend)
	return err
}

const createLedger = `-- name: CreateLedger :one
INSERT INTO ledgers (
    title, members
)
VALUES (
    $1, $2
)
ON CONFLICT DO NOTHING
RETURNING id, title, members, transactions, created_at, updated_at
`

type CreateLedgerParams struct {
	Title   string
	Members []uuid.UUID
}

func (q *Queries) CreateLedger(ctx context.Context, arg CreateLedgerParams) (Ledger, error) {
	row := q.db.QueryRowContext(ctx, createLedger, arg.Title, pq.Array(arg.Members))
	var i Ledger
	err := row.Scan(
		&i.ID,
		&i.Title,
		pq.Array(&i.Members),
		pq.Array(&i.Transactions),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLedger = `-- name: DeleteLedger :exec
DELETE FROM ledgers
WHERE id = $1
`

func (q *Queries) DeleteLedger(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteLedger, id)
	return err
}

const getLedgerById = `-- name: GetLedgerById :one
SELECT id, title, members, transactions, created_at, updated_at FROM ledgers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLedgerById(ctx context.Context, id uuid.UUID) (Ledger, error) {
	row := q.db.QueryRowContext(ctx, getLedgerById, id)
	var i Ledger
	err := row.Scan(
		&i.ID,
		&i.Title,
		pq.Array(&i.Members),
		pq.Array(&i.Transactions),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeUserFromLedger = `-- name: RemoveUserFromLedger :exec
SELECT array_remove(members, $2) as members from ledgers
WHERE id = $1
`

type RemoveUserFromLedgerParams struct {
	ID          uuid.UUID
	ArrayRemove interface{}
}

func (q *Queries) RemoveUserFromLedger(ctx context.Context, arg RemoveUserFromLedgerParams) error {
	_, err := q.db.ExecContext(ctx, removeUserFromLedger, arg.ID, arg.ArrayRemove)
	return err
}
