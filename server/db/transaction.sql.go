// Code generated by sqlc. DO NOT EDIT.
// source: transaction.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    debitor, creditor, amount, note
)
VALUES (
    $1, $2, $3, $4
)
ON CONFLICT DO NOTHING
RETURNING id, debitor, creditor, amount, note, created_at, updated_at
`

type CreateTransactionParams struct {
	Debitor  uuid.UUID
	Creditor uuid.UUID
	Amount   float64
	Note     sql.NullString
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.Debitor,
		arg.Creditor,
		arg.Amount,
		arg.Note,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Debitor,
		&i.Creditor,
		&i.Amount,
		&i.Note,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransactionById = `-- name: GetTransactionById :one
SELECT id, debitor, creditor, amount, note, created_at, updated_at FROM transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransactionById(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionById, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Debitor,
		&i.Creditor,
		&i.Amount,
		&i.Note,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
